<?xml version="1.0" encoding="UTF-8"?>
<dataTemplate name="XXUPNATA" description="UP HR Notification of Approval of Temporary Appointment" defaultPackage="" Version="1.0">

<parameters>
	<parameter name="P_DATE_REQUESTED" dataType="date"/>   
	<parameter name="P_LEGAL_EMPLOYER" dataType="number"/>   
	<parameter name="P_PERSON_ID" dataType="number"/>
	<parameter name="P_EMPLOYEE_ASSIGNMENT_ID" dataType="character"/>
	<parameter name="P_SIGNATORY_PERSON_ID" dataType="number"/>
	<parameter name="P_SIGNATORY_ASSIGNMENT_ID" dataType="character"/>
	<parameter name="P_START_DATE" dataType="date"/>
	<parameter name="P_END_DATE" dataType="date"/>
	<parameter name="P_INPUT_1" dataType="character"/>
	
</parameters>

<dataQuery>

<sqlStatement name="Q_LEGAL_ENT">
<![CDATA[
select UPPER(SUBSTR(org.name, 4)) as LEGAL_ENTITY from hr_organization_units org where org.organization_id = :P_LEGAL_EMPLOYER
]]>
</sqlStatement>

<sqlStatement name="Q_LOCATION_ADD">
<![CDATA[

select loc.ADDRESS_LINE_1||', '|| loc.TOWN_OR_CITY as LOCATION_ADD
		from hr_locations_all loc
		where
                loc.SHIP_TO_SITE_FLAG = 'Y'
   		and loc.location_id = (select org.location_id from 
		hr_all_organization_units org where org.organization_id = :P_LEGAL_EMPLOYER)

]]>
</sqlStatement>

<sqlStatement name="Q_SEQUENCE">
<![CDATA[
   SELECT LPAD(TO_CHAR(xxup_seq_nata.NEXTVAL),9,'0') as seq FROM DUAL
]]>
</sqlStatement>

<sqlStatement name="Q_EMP_FULL_NAME">
<![CDATA[

SELECT TRIM((SELECT fnd.meaning
              FROM FND_LOOKUP_VALUES fnd
              WHERE fnd.LOOKUP_CODE = ppf.TITLE
              AND fnd.LOOKUP_TYPE = 'UP_HR_TITLE') || ' ' ||
        INITCAP(ppf.first_name||' '||SUBSTR(ppf.middle_names,1,1)||'. '||ppf.last_name||' '||ppf.suffix)) EMP_FULL_NAME
FROM per_people_f ppf
WHERE :P_START_DATE between ppf.effective_start_date and ppf.effective_end_date
AND ppf.person_id = :P_PERSON_ID

]]>
</sqlStatement>

<sqlStatement name="Q_EMP_ORG">
<![CDATA[

select substr(substr(PALD.POSITION,instr(PALD.POSITION,'.',1,1)+1,(instr(PALD.POSITION,'.',1,2)-1)-(instr(PALD.POSITION,'.',1,1)-1)-1),
                instr(substr(PALD.POSITION,instr(PALD.POSITION,'.',1,1)+1,(instr(PALD.POSITION,'.',1,2)-1)-(instr(PALD.POSITION,'.',1,1)-1)-1), ' ',1,1)+1,
                instr(substr(PALD.POSITION,instr(PALD.POSITION,'.',1,1)+1,(instr(PALD.POSITION,'.',1,2)-1)-(instr(PALD.POSITION,'.',1,1)-1)), '.',1,1)
               ) AS EMP_ORG
               from PER_ALL_ASSIGNMENTS_D PALD, PER_ALL_ASSIGNMENTS_F PALF
               where PALD.ASSIGNMENT_ID = PALF.ASSIGNMENT_ID
               and PALF.ASSIGNMENT_ID = :P_EMPLOYEE_ASSIGNMENT_ID
               and :P_START_DATE BETWEEN PALD.EFFECTIVE_START_DATE AND PALD.EFFECTIVE_END_DATE
               and :P_START_DATE BETWEEN PALF.EFFECTIVE_START_DATE and PALF.EFFECTIVE_END_DATE
			   AND rownum = 1

			   
]]>
</sqlStatement>

<sqlStatement name="Q_CU">
<![CDATA[

select INITCAP(SUBSTR(org.name, 4)) as BRANCH from hr_organization_units org where org.organization_id = :P_LEGAL_EMPLOYER

]]>
</sqlStatement>

<sqlStatement name="Q_EMP_POS">
<![CDATA[

select substr(PALD.POSITION,1,instr(PALD.POSITION,'.')-1) EMP_POS
      ,(SELECT CASE WHEN INSTR(meaning,'FT') >= 1
                    THEN  REPLACE(meaning,'FT ','')
                    WHEN INSTR(meaning,'PT') >= 1
                    THEN  REPLACE(meaning,'PT ','')
                    ELSE meaning
               END
           FROM   fnd_lookup_values flv
           WHERE  lookup_type = 'EMP_CAT'
           AND    enabled_flag = 'Y'
           AND    flv.lookup_code = palf.EMPLOYMENT_CATEGORY) ASSIGNMENT_CATEGORY
    from PER_ALL_ASSIGNMENTS_D PALD, PER_ALL_ASSIGNMENTS_F PALF
               where PALD.ASSIGNMENT_ID = PALF.ASSIGNMENT_ID
               and PALF.ASSIGNMENT_ID = :P_EMPLOYEE_ASSIGNMENT_ID
               and :P_START_DATE BETWEEN PALD.EFFECTIVE_START_DATE AND PALD.EFFECTIVE_END_DATE
               and :P_START_DATE BETWEEN PALF.EFFECTIVE_START_DATE and PALF.EFFECTIVE_END_DATE
         AND rownum = 1
]]>
</sqlStatement>

<sqlStatement name="Q_GRADE_STEP">
<![CDATA[
	SELECT to_char(pg.name) || '-' || to_char(psps.sequence) SG
	FROM hr.per_all_assignments_f paaf
	   ,hr.per_all_people_f papf
	   ,per_spinal_point_placements_f pspp
	   ,per_spinal_point_steps_f psps
	   ,per_grades pg
	WHERE paaf.person_id = papf.person_id
	  AND :P_START_DATE BETWEEN papf.effective_start_date AND papf.effective_end_date
	  AND :P_START_DATE BETWEEN paaf.effective_start_date AND paaf.effective_end_date
	  AND paaf.grade_id = pg.grade_id 
	  AND pspp.assignment_id = paaf.assignment_id
	  AND psps.step_id = pspp.step_id
	  AND paaf.assignment_id = :P_EMPLOYEE_ASSIGNMENT_ID
]]>
</sqlStatement>

<sqlStatement name="Q_SAL_IN_WORDS">
<![CDATA[
	
select (xxup_reports_pkg.pad_blank(((CASE NVL(xxup_pay_fast_formula_pkg.get_salary(paf.assignment_id,:P_START_DATE),0) * 12 
                WHEN 0 THEN 'Zero'
                ELSE REPLACE(INITCAP((TO_CHAR(TO_DATE(NVL(xxup_pay_fast_formula_pkg.get_salary(paf.assignment_id,:P_START_DATE),0) * 12,'j'), 'jsp'))),'-',' ')
               END)  ||
               (CASE xxup_reports_pkg.get_rata(paf.assignment_id,:P_START_DATE)
                          WHEN 0 THEN ''
                          ELSE NULL
                     END)),51)) SAL_IN_WORDS
					 from PER_ALL_ASSIGNMENTS_D PALD, PER_ALL_ASSIGNMENTS_F paf
               where PALD.ASSIGNMENT_ID = paf.ASSIGNMENT_ID
               and paf.ASSIGNMENT_ID = :P_EMPLOYEE_ASSIGNMENT_ID
               and :P_START_DATE BETWEEN paf.EFFECTIVE_START_DATE AND paf.EFFECTIVE_END_DATE
			   and :P_START_DATE BETWEEN PALD.EFFECTIVE_START_DATE and PALD.EFFECTIVE_END_DATE
               and rownum = 1
	
]]>
</sqlStatement>

<sqlStatement name="Q_SAL_IN_NUMBERS">
<![CDATA[

select (xxup_reports_pkg.pad_blank(((CASE NVL(xxup_pay_fast_formula_pkg.get_salary(paf.assignment_id,:P_START_DATE),0) * 12 
                WHEN 0 THEN 'Zero'
               -- ELSE REPLACE(INITCAP((TO_CHAR(TO_DATE(NVL(xxup_pay_fast_formula_pkg.get_salary(paf.assignment_id,:P_START_DATE),0) * 12,'j'), 'jsp'))),'-',' ')
               END) ||
               TO_CHAR((xxup_pay_fast_formula_pkg.get_salary(paf.assignment_id,:P_START_DATE) * 12),'fm999,990.00') ||
               (CASE xxup_reports_pkg.get_rata(paf.assignment_id,:P_START_DATE)
                          WHEN 0 THEN ' '
                          ELSE NULL
                     END)),10)) SAL_PER_ANNUM
					 from PER_ALL_ASSIGNMENTS_D PALD, PER_ALL_ASSIGNMENTS_F paf
               where PALD.ASSIGNMENT_ID = paf.ASSIGNMENT_ID
               and paf.ASSIGNMENT_ID = :P_EMPLOYEE_ASSIGNMENT_ID
               and :P_START_DATE BETWEEN paf.EFFECTIVE_START_DATE AND paf.EFFECTIVE_END_DATE
			   and :P_START_DATE BETWEEN PALD.EFFECTIVE_START_DATE and PALD.EFFECTIVE_END_DATE
               and rownum = 1

]]>
</sqlStatement>

<sqlStatement name="Q_DATE_REQUESTED">
<![CDATA[
   SELECT TO_CHAR(:P_DATE_REQUESTED,'DD') as DAY
		 ,TRIM(TO_CHAR(:P_DATE_REQUESTED,'Month')) as MONTH
		 ,TRIM(TO_CHAR(:P_DATE_REQUESTED,'YYYY')) as YEAR
		 ,LOWER(SUBSTR(TO_CHAR(:P_DATE_REQUESTED,'DDth'),-2,2)) as ORD --ORDINAL
		 ,TO_CHAR(:P_DATE_REQUESTED,'Month YYYY') as MONTH_YEAR
		 ,TO_CHAR(:P_START_DATE,'DD fmMonth YYYY') as START_DATE
		 ,TO_CHAR(:P_END_DATE,'DD fmMonth YYYY') as END_DATE
   FROM DUAL
]]>
</sqlStatement>


<sqlStatement name="Q_SIGNATORY">
<![CDATA[
   SELECT
         PPF.LAST_NAME AS SIG_LAST_NAME,
         PPF.FIRST_NAME AS SIG_FIRST_NAME,
         PPF.MIDDLE_NAMES AS SIG_MIDDLE_NAMES,
		(substr(regexp_substr(PPF.MIDDLE_NAMES,'[^ ]+', 1,1), 1,1)||''||
         substr(regexp_substr(PPF.MIDDLE_NAMES,'[^ ]+', 1,2), 1,1)||'.')  AS SIG_MIDDLE_INITIAL,
         PAPD.TITLE AS SIG_TITLE,   
		 PPF.FULL_NAME AS FULL_NAME_1,
		 UPPER(PPF.FIRST_NAME || ' ' ||  (substr(regexp_substr(PPF.MIDDLE_NAMES,'[^ ]+', 1,1), 1,1)||''||
         substr(regexp_substr(PPF.MIDDLE_NAMES,'[^ ]+', 1,2), 1,1)||'.') || ' ' || PPF.LAST_NAME ) AS SIG_FULL_NAME,		 
        (SELECT TO_CHAR(CURRENT_DATE, 'd fmMonth yyyy') FROM DUAL) DATE_ISSUED,		 
		 substr(PALD.POSITION,1,instr(PALD.POSITION,'.')-1) AS SIG_POS,
         --substr(PALD.POSITION,instr(PALD.POSITION,'.',1,1)+1,(instr(PALD.POSITION,'.',1,2)-1)-(instr(PALD.POSITION,'.',1,1)-1)-1) as SIG_ORGANIZATION
		 --Code below trims the CU name from the original Organization name. If first word is not CU name then return org name
		(SELECT DECODE(SUBSTR(HAOU.NAME,0,INSTR(HAOU.NAME, ' ')), 'UP ' ,SUBSTR(HAOU.NAME,INSTR(HAOU.NAME, ' ')+1) 
																, 'UPB ',SUBSTR(HAOU.NAME,INSTR(HAOU.NAME, ' ')+1)
																, 'UPC ',SUBSTR(HAOU.NAME,INSTR(HAOU.NAME, ' ')+1)
																, 'UPD ',SUBSTR(HAOU.NAME,INSTR(HAOU.NAME, ' ')+1)
																, 'UPLB ',SUBSTR(HAOU.NAME,INSTR(HAOU.NAME, ' ')+1)
																, 'UPM ',SUBSTR(HAOU.NAME,INSTR(HAOU.NAME, ' ')+1)
																, 'UPM PGH ',SUBSTR(HAOU.NAME,INSTR(HAOU.NAME, ' ')+1)
																, 'UPMin ',SUBSTR(HAOU.NAME,INSTR(HAOU.NAME, ' ')+1)
																, 'UPOU ',SUBSTR(HAOU.NAME,INSTR(HAOU.NAME, ' ')+1)
																, 'UPPGH ',SUBSTR(HAOU.NAME,INSTR(HAOU.NAME, ' ')+1)
																, 'UPS ',SUBSTR(HAOU.NAME,INSTR(HAOU.NAME, ' ')+1)
																, 'UPV ',SUBSTR(HAOU.NAME,INSTR(HAOU.NAME, ' ')+1)
																, 'UPVTC ',SUBSTR(HAOU.NAME,INSTR(HAOU.NAME, ' ')+1)
																, HAOU.NAME)
		FROM DUAL) AS SIG_ORGANIZATION
         FROM PER_PEOPLE_F PPF
          INNER JOIN PER_ALL_ASSIGNMENTS_F PALF
            ON PALF.PERSON_ID = PPF.PERSON_ID
            AND PALF.ASSIGNMENT_ID = :P_SIGNATORY_ASSIGNMENT_ID
             AND PALF.POSITION_ID IS NOT NULL
		  INNER JOIN PER_ALL_PEOPLE_D PAPD
            ON PALF.PERSON_ID = PAPD.PERSON_ID
          INNER JOIN PER_ALL_ASSIGNMENTS_D PALD
            ON PALD.ASSIGNMENT_ID =  PALF.ASSIGNMENT_ID
            AND PALD.POSITION IS NOT NULL
			/* start v1.1 */
		  INNER JOIN HR_ALL_ORGANIZATION_UNITS HAOU		
			ON PALF.ORGANIZATION_ID = HAOU.ORGANIZATION_ID
			/* end v1.1 */
         WHERE PPF.PERSON_ID = :P_SIGNATORY_PERSON_ID
            AND PPF.EFFECTIVE_START_DATE <= :P_START_DATE
            AND ROWNUM = 1
            ORDER BY PPF.EFFECTIVE_START_DATE ASC
]]>
</sqlStatement>

<sqlStatement name="Q_PLANT_NUM">
<![CDATA[

select nvl(ppd.segment3,'N/A') as PLANT_NUM
from hr_positions_f hpf
		  ,per_position_definitions ppd
		  ,per_assignments_f paf
		  where paf.assignment_id = :P_EMPLOYEE_ASSIGNMENT_ID
		  AND paf.position_id = hpf.position_id
		  AND hpf.position_definition_id = ppd.position_definition_id
		  AND :P_START_DATE BETWEEN paf.effective_start_date AND paf.effective_end_date
		  and :P_START_DATE BETWEEN hpf.EFFECTIVE_START_DATE and hpf.EFFECTIVE_END_DATE
]]>
</sqlStatement>

<sqlStatement name="Q_INPUT">
<![CDATA[
   SELECT :P_INPUT_1 INPUT_1
   FROM DUAL
]]>
</sqlStatement>

</dataQuery>
<dataStructure>

<group name="Q_LEGAL_ENT" source = "Q_LEGAL_ENT">
<element name="LEGAL_ENTITY" value="LEGAL_ENTITY"/>
</group>

<group name="Q_EMP_ORG" source = "Q_EMP_ORG">
<element name="EMP_ORG" value="EMP_ORG"/>
</group>


<group name="Q_LOCATION_ADD" source = "Q_LOCATION_ADD">
<element name="LOCATION_ADD" value="LOCATION_ADD"/>
</group>

<group name="Q_SEQUENCE" source="Q_SEQUENCE">
   <element name="SEQ" value="SEQ"/>
</group>

<group name="Q_EMP_FULL_NAME" source="Q_EMP_FULL_NAME">
<element name="EMP_FULL_NAME" value="EMP_FULL_NAME"/>
</group>

<group name="Q_CU" source="Q_CU">
<element name="BRANCH" value="BRANCH"/>
</group>

<group name="Q_EMP_POS" source="Q_EMP_POS">
  <element name="EMP_POS" value="EMP_POS"/>
  <element name="ASSIGNMENT_CATEGORY" value="ASSIGNMENT_CATEGORY"/>
</group>

<group name="Q_GRADE_STEP" source="Q_GRADE_STEP">
<element name="SG" value="SG"/>
</group>

<group name="Q_SAL_IN_WORDS" source="Q_SAL_IN_WORDS">
<element name="SAL_IN_WORDS" value="SAL_IN_WORDS"/>
</group>

<group name="Q_SAL_IN_NUMBERS" source="Q_SAL_IN_NUMBERS">
<element name="SAL_PER_ANNUM" value="SAL_PER_ANNUM"/>
</group>

<group name="Q_DATE_REQUESTED" source="Q_DATE_REQUESTED">
   <element name="DATE_REQUESTED" value="DATE_REQUESTED"/>
   <element name="DAY" value="DAY"/>
   <element name="MONTH" value="MONTH"/>
   <element name="YEAR" value="YEAR"/>
   <element name="ORD" value="ORD"/>
   <element name="START_DATE" value="START_DATE"/>
   <element name="END_DATE" value="END_DATE"/> 
</group>

<group name="Q_SIGNATORY" source="Q_SIGNATORY">
   <element name="SIG_LAST_NAME" value="SIG_LAST_NAME"/>
   <element name="SIG_FIRST_NAME" value="SIG_FIRST_NAME"/>
   <element name="SIG_MIDDLE_NAMES" value="SIG_MIDDLE_NAMES"/>
   <element name="SIG_MIDDLE_INITIAL" value="SIG_MIDDLE_INITIAL"/>
   <element name="SIG_FULL_NAME" value="SIG_FULL_NAME"/>
   <element name="SIG_TITLE" value="SIG_TITLE"/>
   <element name="SIG_POS" value="SIG_POS"/>
   <element name="SIG_ORGANIZATION" value="SIG_ORGANIZATION"/>
   <element name="DATE_ISSUED" value="DATE_ISSUED"/>
</group>

<group name="Q_PLANT_NUM" source="Q_PLANT_NUM">
<element name="PLANT_NUM" value="PLANT_NUM"/>
</group>

<group name="Q_INPUT" source="Q_INPUT">
<element name="INPUT_1" value="INPUT_1"/>
</group>


</dataStructure>
</dataTemplate>
